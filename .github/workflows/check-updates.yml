name: Check for Plugin Updates

# on:
#   schedule:
#     - cron: '0 0 * * *' # Runs daily at midnight UTC
#   workflow_dispatch: # Allows manual triggering from GitHub UI

jobs:
  check_plugin_updates:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Homebrew
        run: |
          brew tap mtrin/audio-plugins # Ensure your tap is available

      - name: Process all GitHub-sourced formulae
        run: |
          # Loop through all .rb files in the Formula directory
          for FORMULA_PATH in Formula/*.rb; do
            FORMULA_NAME=$(basename "$FORMULA_PATH" .rb)
            echo "Processing formula: $FORMULA_NAME"

            # Read current formula data
            CURRENT_URL=$(grep 'url "' "$FORMULA_PATH" | awk -F'"' '{print $2}')
            CURRENT_SHA256=$(grep 'sha256 "' "$FORMULA_PATH" | awk -F'"' '{print $2}')
            HOMEPAGE=$(grep 'homepage "' "$FORMULA_PATH" | awk -F'"' '{print $2}')
            SOURCE_TYPE=$(grep 'source_type :' "$FORMULA_PATH" | awk '{print $2}')

            if [ "$SOURCE_TYPE" != "github" ]; then
              echo "Skipping $FORMULA_NAME: Not a GitHub source_type."
              continue
            fi

            echo "  Current URL: $CURRENT_URL"
            echo "  Current SHA256: $CURRENT_SHA256"
            echo "  Homepage: $HOMEPAGE"

            # Extract owner and repo from homepage URL
            OWNER=$(echo "$HOMEPAGE" | sed -E 's/https:\/\/github.com\/([^\/]+)\/([^\/]+).*/\1/')
            REPO=$(echo "$HOMEPAGE" | sed -E 's/https:\/\/github.com\/([^\/]+)\/([^\/]+).*/\2/')

            if [ -z "$OWNER" ] || [ -z "$REPO" ]; then
              echo "  Could not extract GitHub owner/repo from homepage for $FORMULA_NAME. Skipping."
              continue
            fi
            echo "  GitHub Repo: $OWNER/$REPO"

            # Fetch latest release data
            RELEASE_DATA=$(curl -s "https://api.github.com/repos/$OWNER/$REPO/releases/latest")
            NEW_URL=$(echo "$RELEASE_DATA" | jq -r '.assets[] | select(.name | contains("macOS") and endswith(".dmg")) | .browser_download_url')
            
            if [ -z "$NEW_URL" ]; then
              echo "  No macOS .dmg asset found in the latest release for $FORMULA_NAME. Skipping."
              continue
            fi

            # Download the new DMG and calculate SHA256
            TEMP_DMG="/tmp/${FORMULA_NAME}.dmg"
            curl -L "$NEW_URL" -o "$TEMP_DMG"
            NEW_SHA256=$(shasum -a 256 "$TEMP_DMG" | awk '{print $1}')

            echo "  New URL: $NEW_URL"
            echo "  New SHA256: $NEW_SHA256"

            # Check for update
            if [ "$NEW_URL" != "$CURRENT_URL" ] || [ "$NEW_SHA256" != "$CURRENT_SHA256" ]; then
              echo "  Update needed for $FORMULA_NAME!"
              
              # Create a new branch for the update
              BRANCH_NAME="auto-update/${FORMULA_NAME}-$(date +%Y%m%d%H%M%S)"
              git checkout -b "$BRANCH_NAME"

              # Update the formula file
              # Use sed to replace the URL and SHA256
              sed -i '' "s|url \"$CURRENT_URL\"|url \"$NEW_URL\"|" "$FORMULA_PATH"
              sed -i '' "s|sha256 \"$CURRENT_SHA256\"|sha256 \"$NEW_SHA256\"|" "$FORMULA_PATH"

              # Commit changes
              git add "$FORMULA_PATH"
              git commit -m "Update $FORMULA_NAME: $NEW_URL"

              # Create Pull Request
              gh pr create --base main --head "$BRANCH_NAME" --title "Update $FORMULA_NAME" --body "Automated update for \`$FORMULA_NAME\`.\n\nNew URL: \`$NEW_URL\`\nNew SHA256: \`$NEW_SHA256\`"

              # Switch back to main branch and clean up
              git checkout main
              git branch -D "$BRANCH_NAME" # Delete local branch after PR creation
            else
              echo "  No update needed for $FORMULA_NAME."
            fi
            rm -f "$TEMP_DMG" # Clean up downloaded DMG
            echo "" # Newline for readability
          done
